- content_for :title do
  = @event.title

- content_for :head do
  %meta{property: 'og:title', content: @event.title}
  %meta{property: 'og:type', content: 'video.other'}
  %meta{property: 'og:url', content: event_path(slug: @event.slug)}
  %meta{property: 'og:image', content: @event.poster_url}
  %meta{property: 'og:video', content: opengraph_video(@event.video_recordings_sorted)}
  %meta{property: 'og:description', content: @event.short_description}
  = render partial: 'frontend/shared/folder_feeds', locals: { conference: @conference }
  != "<link href='#{oembed_api_event_url(@event)}' rel='alternate' title='media.ccc.de oembed profile' type='application/json+oembed'>"

- content_for :description do
  %meta{name: 'description', content: @event.short_description}

- cache(@event) do
  .container-fluid
    %h1
      =  @event.title
    - if @event.subtitle
      %h2
        = @event.subtitle

    %p.persons
      = render partial: 'frontend/shared/event_persons', locals: { persons: @event.persons }

    %ul.nav.nav-tabs.nav-justified{role: 'tablist', 'data-tabs' => 'tabs'}
      - if @video_recordings.present?
        %li.active
          %a{href: event_path(slug: @event.slug), 'data-target' => '#video', role: 'tab', 'data-toggle' => 'tab'} Video
      - if @audio_recordings.present?
        %li{class: ('active' unless @video_recordings.present?)}
          %a{href: '#audio', role: 'tab', 'data-toggle' => 'tab'} Audio
      %li
        %a{href: download_event_path(slug: @event.slug), 'data-target' => '#download', role: 'tab', 'data-toggle' => 'tab'} Download
      %li
        %a{href: '#embedshare', role: 'tab', 'data-toggle' => 'tab'} Share

    .tab-content
      - if @video_recordings.present?
        #video.tab-pane.active
          .kiosk
          = render partial: 'frontend/shared/videoplayer', locals: { height: aspect_ratio_height, width: aspect_ratio_width, video_recordings: @event.video_recordings_sorted, subtitle_tracks: @subtitle_tracks, poster_url: @event.poster_url, event_id: @event.id }

      - if @audio_recordings.present?
        #audio.tab-pane{class: ('active' unless @video_recordings.present?)}
          %audio.audio{controls: 'controls', preload: 'none'}
            - @audio_recordings.each do |recording|
              %source{type: recording.mime_type, src: h(recording.url), data: { lang: recording.language }}

      #download.tab-pane
        = render partial: 'frontend/shared/download', locals: { video_recordings: @event.video_recordings_sorted, audio_recordings: @audio_recordings, subtitle_tracks: @subtitle_tracks, conference: @conference }

      #embedshare.tab-pane
        = render partial: 'frontend/shared/embedshare', locals: { event: @event }

    %ul.metadata
      %li
        %span.icon.icon-clock-o
        = duration_in_minutes(@event.duration)
      %li
        %span.icon.icon-calendar-o{title: display_date_title(@event)}
        = @event.display_date
      %li
        %span.icon.icon-eye
        = @event.view_count
      - if @event.link.present?
        %li
          %span.icon.icon-external-link
          %a{href: @event.link}
            = parse_url_host(@event)

    - if @event.description.present?
      %h3 About
      %p.description
        = simple_format @event.description

    - if @event.tags.present?
      %h3 Tags
      - @event.tags.each do |tag|
        != link_for(tag)

  - if @audio_recordings.present?
    = render 'frontend/shared/audioplayer_js'

  :javascript
    function setDefaultHash() {
      window.location.replaceHash('#video');
    }

    // activate tab via hash and default to video
    function setTabToHash() {
      var hash = window.location.hash.split('&')[0]; // split video-stamp of the hash
      if (hash === '') {
        return;
      }
      var activeTab = $('.nav-tabs a[href=' + hash + '], .nav-tabs a[data-target=' + hash + ']')
      if (activeTab.length === 0) {
        console.warn('invalid hash, cannot use tab!');
        setDefaultHash();
      }
    }
    setTabToHash();

    // change hash on tab change
    $('.nav-tabs a').on('shown.bs.tab', function (e) {
      var hash = e.target.hash || e.target.dataset.target;
      window.location.replaceHash(hash);
    });

    // adjust tabs when hash changes
    window.onhashchange = setTabToHash;
